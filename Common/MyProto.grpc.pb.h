// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: MyProto.proto
#ifndef GRPC_MyProto_2eproto__INCLUDED
#define GRPC_MyProto_2eproto__INCLUDED

#include "MyProto.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace MyPackage {

// 文件上传下载服务
class MyFileService final {
 public:
  static constexpr char const* service_full_name() {
    return "MyPackage.MyFileService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 上传文件
    std::unique_ptr< ::grpc::ClientWriterInterface< ::MyPackage::FileUploadRequest>> uploadFile(::grpc::ClientContext* context, ::MyPackage::FileUploadResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::MyPackage::FileUploadRequest>>(uploadFileRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::MyPackage::FileUploadRequest>> AsyncuploadFile(::grpc::ClientContext* context, ::MyPackage::FileUploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::MyPackage::FileUploadRequest>>(AsyncuploadFileRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::MyPackage::FileUploadRequest>> PrepareAsyncuploadFile(::grpc::ClientContext* context, ::MyPackage::FileUploadResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::MyPackage::FileUploadRequest>>(PrepareAsyncuploadFileRaw(context, response, cq));
    }
    // 下载文件
    std::unique_ptr< ::grpc::ClientReaderInterface< ::MyPackage::FileDownloadResponse>> downloadFile(::grpc::ClientContext* context, const ::MyPackage::FileDownloadRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::MyPackage::FileDownloadResponse>>(downloadFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyPackage::FileDownloadResponse>> AsyncdownloadFile(::grpc::ClientContext* context, const ::MyPackage::FileDownloadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyPackage::FileDownloadResponse>>(AsyncdownloadFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyPackage::FileDownloadResponse>> PrepareAsyncdownloadFile(::grpc::ClientContext* context, const ::MyPackage::FileDownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyPackage::FileDownloadResponse>>(PrepareAsyncdownloadFileRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 上传文件
      virtual void uploadFile(::grpc::ClientContext* context, ::MyPackage::FileUploadResponse* response, ::grpc::ClientWriteReactor< ::MyPackage::FileUploadRequest>* reactor) = 0;
      // 下载文件
      virtual void downloadFile(::grpc::ClientContext* context, const ::MyPackage::FileDownloadRequest* request, ::grpc::ClientReadReactor< ::MyPackage::FileDownloadResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientWriterInterface< ::MyPackage::FileUploadRequest>* uploadFileRaw(::grpc::ClientContext* context, ::MyPackage::FileUploadResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::MyPackage::FileUploadRequest>* AsyncuploadFileRaw(::grpc::ClientContext* context, ::MyPackage::FileUploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::MyPackage::FileUploadRequest>* PrepareAsyncuploadFileRaw(::grpc::ClientContext* context, ::MyPackage::FileUploadResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::MyPackage::FileDownloadResponse>* downloadFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileDownloadRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::MyPackage::FileDownloadResponse>* AsyncdownloadFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileDownloadRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::MyPackage::FileDownloadResponse>* PrepareAsyncdownloadFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileDownloadRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientWriter< ::MyPackage::FileUploadRequest>> uploadFile(::grpc::ClientContext* context, ::MyPackage::FileUploadResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::MyPackage::FileUploadRequest>>(uploadFileRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::MyPackage::FileUploadRequest>> AsyncuploadFile(::grpc::ClientContext* context, ::MyPackage::FileUploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::MyPackage::FileUploadRequest>>(AsyncuploadFileRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::MyPackage::FileUploadRequest>> PrepareAsyncuploadFile(::grpc::ClientContext* context, ::MyPackage::FileUploadResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::MyPackage::FileUploadRequest>>(PrepareAsyncuploadFileRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::MyPackage::FileDownloadResponse>> downloadFile(::grpc::ClientContext* context, const ::MyPackage::FileDownloadRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::MyPackage::FileDownloadResponse>>(downloadFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::MyPackage::FileDownloadResponse>> AsyncdownloadFile(::grpc::ClientContext* context, const ::MyPackage::FileDownloadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::MyPackage::FileDownloadResponse>>(AsyncdownloadFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::MyPackage::FileDownloadResponse>> PrepareAsyncdownloadFile(::grpc::ClientContext* context, const ::MyPackage::FileDownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::MyPackage::FileDownloadResponse>>(PrepareAsyncdownloadFileRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void uploadFile(::grpc::ClientContext* context, ::MyPackage::FileUploadResponse* response, ::grpc::ClientWriteReactor< ::MyPackage::FileUploadRequest>* reactor) override;
      void downloadFile(::grpc::ClientContext* context, const ::MyPackage::FileDownloadRequest* request, ::grpc::ClientReadReactor< ::MyPackage::FileDownloadResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientWriter< ::MyPackage::FileUploadRequest>* uploadFileRaw(::grpc::ClientContext* context, ::MyPackage::FileUploadResponse* response) override;
    ::grpc::ClientAsyncWriter< ::MyPackage::FileUploadRequest>* AsyncuploadFileRaw(::grpc::ClientContext* context, ::MyPackage::FileUploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::MyPackage::FileUploadRequest>* PrepareAsyncuploadFileRaw(::grpc::ClientContext* context, ::MyPackage::FileUploadResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::MyPackage::FileDownloadResponse>* downloadFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileDownloadRequest& request) override;
    ::grpc::ClientAsyncReader< ::MyPackage::FileDownloadResponse>* AsyncdownloadFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileDownloadRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::MyPackage::FileDownloadResponse>* PrepareAsyncdownloadFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileDownloadRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_uploadFile_;
    const ::grpc::internal::RpcMethod rpcmethod_downloadFile_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 上传文件
    virtual ::grpc::Status uploadFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::MyPackage::FileUploadRequest>* reader, ::MyPackage::FileUploadResponse* response);
    // 下载文件
    virtual ::grpc::Status downloadFile(::grpc::ServerContext* context, const ::MyPackage::FileDownloadRequest* request, ::grpc::ServerWriter< ::MyPackage::FileDownloadResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_uploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_uploadFile() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_uploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::MyPackage::FileUploadRequest>* /*reader*/, ::MyPackage::FileUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuploadFile(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::MyPackage::FileUploadResponse, ::MyPackage::FileUploadRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_downloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_downloadFile() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_downloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileDownloadRequest* /*request*/, ::grpc::ServerWriter< ::MyPackage::FileDownloadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdownloadFile(::grpc::ServerContext* context, ::MyPackage::FileDownloadRequest* request, ::grpc::ServerAsyncWriter< ::MyPackage::FileDownloadResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_uploadFile<WithAsyncMethod_downloadFile<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_uploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_uploadFile() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::MyPackage::FileUploadRequest, ::MyPackage::FileUploadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::MyPackage::FileUploadResponse* response) { return this->uploadFile(context, response); }));
    }
    ~WithCallbackMethod_uploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::MyPackage::FileUploadRequest>* /*reader*/, ::MyPackage::FileUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::MyPackage::FileUploadRequest>* uploadFile(
      ::grpc::CallbackServerContext* /*context*/, ::MyPackage::FileUploadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_downloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_downloadFile() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::MyPackage::FileDownloadRequest, ::MyPackage::FileDownloadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MyPackage::FileDownloadRequest* request) { return this->downloadFile(context, request); }));
    }
    ~WithCallbackMethod_downloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileDownloadRequest* /*request*/, ::grpc::ServerWriter< ::MyPackage::FileDownloadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::MyPackage::FileDownloadResponse>* downloadFile(
      ::grpc::CallbackServerContext* /*context*/, const ::MyPackage::FileDownloadRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_uploadFile<WithCallbackMethod_downloadFile<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_uploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_uploadFile() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_uploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::MyPackage::FileUploadRequest>* /*reader*/, ::MyPackage::FileUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_downloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_downloadFile() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_downloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileDownloadRequest* /*request*/, ::grpc::ServerWriter< ::MyPackage::FileDownloadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_uploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_uploadFile() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_uploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::MyPackage::FileUploadRequest>* /*reader*/, ::MyPackage::FileUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuploadFile(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_downloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_downloadFile() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_downloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileDownloadRequest* /*request*/, ::grpc::ServerWriter< ::MyPackage::FileDownloadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdownloadFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_uploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_uploadFile() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->uploadFile(context, response); }));
    }
    ~WithRawCallbackMethod_uploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::MyPackage::FileUploadRequest>* /*reader*/, ::MyPackage::FileUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* uploadFile(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_downloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_downloadFile() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->downloadFile(context, request); }));
    }
    ~WithRawCallbackMethod_downloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileDownloadRequest* /*request*/, ::grpc::ServerWriter< ::MyPackage::FileDownloadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* downloadFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_downloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_downloadFile() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::MyPackage::FileDownloadRequest, ::MyPackage::FileDownloadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::MyPackage::FileDownloadRequest, ::MyPackage::FileDownloadResponse>* streamer) {
                       return this->StreameddownloadFile(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_downloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status downloadFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileDownloadRequest* /*request*/, ::grpc::ServerWriter< ::MyPackage::FileDownloadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreameddownloadFile(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::MyPackage::FileDownloadRequest,::MyPackage::FileDownloadResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_downloadFile<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_downloadFile<Service > StreamedService;
};

// 业务服务
class MyOperateService final {
 public:
  static constexpr char const* service_full_name() {
    return "MyPackage.MyOperateService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 新增文件
    virtual ::grpc::Status insertFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::MyPackage::FileOperateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>> AsyncinsertFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>>(AsyncinsertFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>> PrepareAsyncinsertFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>>(PrepareAsyncinsertFileRaw(context, request, cq));
    }
    // 删除文件
    virtual ::grpc::Status deleteFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::MyPackage::FileOperateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>> AsyncdeleteFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>>(AsyncdeleteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>> PrepareAsyncdeleteFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>>(PrepareAsyncdeleteFileRaw(context, request, cq));
    }
    // 修改文件
    virtual ::grpc::Status updateFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::MyPackage::FileOperateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>> AsyncupdateFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>>(AsyncupdateFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>> PrepareAsyncupdateFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>>(PrepareAsyncupdateFileRaw(context, request, cq));
    }
    // 查询文件
    virtual ::grpc::Status selectFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::MyPackage::FileOperateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>> AsyncselectFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>>(AsyncselectFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>> PrepareAsyncselectFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>>(PrepareAsyncselectFileRaw(context, request, cq));
    }
    // 搜索文件
    virtual ::grpc::Status searchFile(::grpc::ClientContext* context, const ::MyPackage::FileSearchRequest& request, ::MyPackage::FileSearchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileSearchResponse>> AsyncsearchFile(::grpc::ClientContext* context, const ::MyPackage::FileSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileSearchResponse>>(AsyncsearchFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileSearchResponse>> PrepareAsyncsearchFile(::grpc::ClientContext* context, const ::MyPackage::FileSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileSearchResponse>>(PrepareAsyncsearchFileRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 新增文件
      virtual void insertFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void insertFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 删除文件
      virtual void deleteFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 修改文件
      virtual void updateFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void updateFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 查询文件
      virtual void selectFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void selectFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 搜索文件
      virtual void searchFile(::grpc::ClientContext* context, const ::MyPackage::FileSearchRequest* request, ::MyPackage::FileSearchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void searchFile(::grpc::ClientContext* context, const ::MyPackage::FileSearchRequest* request, ::MyPackage::FileSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>* AsyncinsertFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>* PrepareAsyncinsertFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>* AsyncdeleteFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>* PrepareAsyncdeleteFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>* AsyncupdateFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>* PrepareAsyncupdateFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>* AsyncselectFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileOperateResponse>* PrepareAsyncselectFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileSearchResponse>* AsyncsearchFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileSearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::FileSearchResponse>* PrepareAsyncsearchFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileSearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status insertFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::MyPackage::FileOperateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>> AsyncinsertFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>>(AsyncinsertFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>> PrepareAsyncinsertFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>>(PrepareAsyncinsertFileRaw(context, request, cq));
    }
    ::grpc::Status deleteFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::MyPackage::FileOperateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>> AsyncdeleteFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>>(AsyncdeleteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>> PrepareAsyncdeleteFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>>(PrepareAsyncdeleteFileRaw(context, request, cq));
    }
    ::grpc::Status updateFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::MyPackage::FileOperateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>> AsyncupdateFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>>(AsyncupdateFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>> PrepareAsyncupdateFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>>(PrepareAsyncupdateFileRaw(context, request, cq));
    }
    ::grpc::Status selectFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::MyPackage::FileOperateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>> AsyncselectFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>>(AsyncselectFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>> PrepareAsyncselectFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>>(PrepareAsyncselectFileRaw(context, request, cq));
    }
    ::grpc::Status searchFile(::grpc::ClientContext* context, const ::MyPackage::FileSearchRequest& request, ::MyPackage::FileSearchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::FileSearchResponse>> AsyncsearchFile(::grpc::ClientContext* context, const ::MyPackage::FileSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::FileSearchResponse>>(AsyncsearchFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::FileSearchResponse>> PrepareAsyncsearchFile(::grpc::ClientContext* context, const ::MyPackage::FileSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::FileSearchResponse>>(PrepareAsyncsearchFileRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void insertFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response, std::function<void(::grpc::Status)>) override;
      void insertFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void deleteFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response, std::function<void(::grpc::Status)>) override;
      void deleteFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void updateFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response, std::function<void(::grpc::Status)>) override;
      void updateFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void selectFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response, std::function<void(::grpc::Status)>) override;
      void selectFile(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void searchFile(::grpc::ClientContext* context, const ::MyPackage::FileSearchRequest* request, ::MyPackage::FileSearchResponse* response, std::function<void(::grpc::Status)>) override;
      void searchFile(::grpc::ClientContext* context, const ::MyPackage::FileSearchRequest* request, ::MyPackage::FileSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>* AsyncinsertFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>* PrepareAsyncinsertFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>* AsyncdeleteFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>* PrepareAsyncdeleteFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>* AsyncupdateFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>* PrepareAsyncupdateFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>* AsyncselectFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyPackage::FileOperateResponse>* PrepareAsyncselectFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileOperateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyPackage::FileSearchResponse>* AsyncsearchFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileSearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyPackage::FileSearchResponse>* PrepareAsyncsearchFileRaw(::grpc::ClientContext* context, const ::MyPackage::FileSearchRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_insertFile_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteFile_;
    const ::grpc::internal::RpcMethod rpcmethod_updateFile_;
    const ::grpc::internal::RpcMethod rpcmethod_selectFile_;
    const ::grpc::internal::RpcMethod rpcmethod_searchFile_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 新增文件
    virtual ::grpc::Status insertFile(::grpc::ServerContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response);
    // 删除文件
    virtual ::grpc::Status deleteFile(::grpc::ServerContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response);
    // 修改文件
    virtual ::grpc::Status updateFile(::grpc::ServerContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response);
    // 查询文件
    virtual ::grpc::Status selectFile(::grpc::ServerContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response);
    // 搜索文件
    virtual ::grpc::Status searchFile(::grpc::ServerContext* context, const ::MyPackage::FileSearchRequest* request, ::MyPackage::FileSearchResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_insertFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_insertFile() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_insertFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status insertFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestinsertFile(::grpc::ServerContext* context, ::MyPackage::FileOperateRequest* request, ::grpc::ServerAsyncResponseWriter< ::MyPackage::FileOperateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deleteFile() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_deleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteFile(::grpc::ServerContext* context, ::MyPackage::FileOperateRequest* request, ::grpc::ServerAsyncResponseWriter< ::MyPackage::FileOperateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_updateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_updateFile() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_updateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateFile(::grpc::ServerContext* context, ::MyPackage::FileOperateRequest* request, ::grpc::ServerAsyncResponseWriter< ::MyPackage::FileOperateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_selectFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_selectFile() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_selectFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selectFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestselectFile(::grpc::ServerContext* context, ::MyPackage::FileOperateRequest* request, ::grpc::ServerAsyncResponseWriter< ::MyPackage::FileOperateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_searchFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_searchFile() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_searchFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileSearchRequest* /*request*/, ::MyPackage::FileSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsearchFile(::grpc::ServerContext* context, ::MyPackage::FileSearchRequest* request, ::grpc::ServerAsyncResponseWriter< ::MyPackage::FileSearchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_insertFile<WithAsyncMethod_deleteFile<WithAsyncMethod_updateFile<WithAsyncMethod_selectFile<WithAsyncMethod_searchFile<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_insertFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_insertFile() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::MyPackage::FileOperateRequest, ::MyPackage::FileOperateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response) { return this->insertFile(context, request, response); }));}
    void SetMessageAllocatorFor_insertFile(
        ::grpc::MessageAllocator< ::MyPackage::FileOperateRequest, ::MyPackage::FileOperateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MyPackage::FileOperateRequest, ::MyPackage::FileOperateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_insertFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status insertFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* insertFile(
      ::grpc::CallbackServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_deleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_deleteFile() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::MyPackage::FileOperateRequest, ::MyPackage::FileOperateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response) { return this->deleteFile(context, request, response); }));}
    void SetMessageAllocatorFor_deleteFile(
        ::grpc::MessageAllocator< ::MyPackage::FileOperateRequest, ::MyPackage::FileOperateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MyPackage::FileOperateRequest, ::MyPackage::FileOperateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_deleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_updateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_updateFile() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::MyPackage::FileOperateRequest, ::MyPackage::FileOperateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response) { return this->updateFile(context, request, response); }));}
    void SetMessageAllocatorFor_updateFile(
        ::grpc::MessageAllocator< ::MyPackage::FileOperateRequest, ::MyPackage::FileOperateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MyPackage::FileOperateRequest, ::MyPackage::FileOperateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_updateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* updateFile(
      ::grpc::CallbackServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_selectFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_selectFile() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::MyPackage::FileOperateRequest, ::MyPackage::FileOperateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MyPackage::FileOperateRequest* request, ::MyPackage::FileOperateResponse* response) { return this->selectFile(context, request, response); }));}
    void SetMessageAllocatorFor_selectFile(
        ::grpc::MessageAllocator< ::MyPackage::FileOperateRequest, ::MyPackage::FileOperateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MyPackage::FileOperateRequest, ::MyPackage::FileOperateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_selectFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selectFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* selectFile(
      ::grpc::CallbackServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_searchFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_searchFile() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::MyPackage::FileSearchRequest, ::MyPackage::FileSearchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MyPackage::FileSearchRequest* request, ::MyPackage::FileSearchResponse* response) { return this->searchFile(context, request, response); }));}
    void SetMessageAllocatorFor_searchFile(
        ::grpc::MessageAllocator< ::MyPackage::FileSearchRequest, ::MyPackage::FileSearchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MyPackage::FileSearchRequest, ::MyPackage::FileSearchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_searchFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileSearchRequest* /*request*/, ::MyPackage::FileSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* searchFile(
      ::grpc::CallbackServerContext* /*context*/, const ::MyPackage::FileSearchRequest* /*request*/, ::MyPackage::FileSearchResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_insertFile<WithCallbackMethod_deleteFile<WithCallbackMethod_updateFile<WithCallbackMethod_selectFile<WithCallbackMethod_searchFile<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_insertFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_insertFile() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_insertFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status insertFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deleteFile() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_deleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_updateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_updateFile() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_updateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_selectFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_selectFile() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_selectFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selectFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_searchFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_searchFile() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_searchFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileSearchRequest* /*request*/, ::MyPackage::FileSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_insertFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_insertFile() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_insertFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status insertFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestinsertFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deleteFile() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_deleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_updateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_updateFile() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_updateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_selectFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_selectFile() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_selectFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selectFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestselectFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_searchFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_searchFile() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_searchFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileSearchRequest* /*request*/, ::MyPackage::FileSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsearchFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_insertFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_insertFile() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->insertFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_insertFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status insertFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* insertFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_deleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_deleteFile() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->deleteFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_deleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_updateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_updateFile() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->updateFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_updateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* updateFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_selectFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_selectFile() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->selectFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_selectFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selectFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* selectFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_searchFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_searchFile() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->searchFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_searchFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileSearchRequest* /*request*/, ::MyPackage::FileSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* searchFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_insertFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_insertFile() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MyPackage::FileOperateRequest, ::MyPackage::FileOperateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MyPackage::FileOperateRequest, ::MyPackage::FileOperateResponse>* streamer) {
                       return this->StreamedinsertFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_insertFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status insertFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedinsertFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MyPackage::FileOperateRequest,::MyPackage::FileOperateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deleteFile() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MyPackage::FileOperateRequest, ::MyPackage::FileOperateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MyPackage::FileOperateRequest, ::MyPackage::FileOperateResponse>* streamer) {
                       return this->StreameddeleteFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_deleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MyPackage::FileOperateRequest,::MyPackage::FileOperateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_updateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_updateFile() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MyPackage::FileOperateRequest, ::MyPackage::FileOperateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MyPackage::FileOperateRequest, ::MyPackage::FileOperateResponse>* streamer) {
                       return this->StreamedupdateFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_updateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status updateFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedupdateFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MyPackage::FileOperateRequest,::MyPackage::FileOperateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_selectFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_selectFile() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MyPackage::FileOperateRequest, ::MyPackage::FileOperateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MyPackage::FileOperateRequest, ::MyPackage::FileOperateResponse>* streamer) {
                       return this->StreamedselectFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_selectFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status selectFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileOperateRequest* /*request*/, ::MyPackage::FileOperateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedselectFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MyPackage::FileOperateRequest,::MyPackage::FileOperateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_searchFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_searchFile() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MyPackage::FileSearchRequest, ::MyPackage::FileSearchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MyPackage::FileSearchRequest, ::MyPackage::FileSearchResponse>* streamer) {
                       return this->StreamedsearchFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_searchFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status searchFile(::grpc::ServerContext* /*context*/, const ::MyPackage::FileSearchRequest* /*request*/, ::MyPackage::FileSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsearchFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MyPackage::FileSearchRequest,::MyPackage::FileSearchResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_insertFile<WithStreamedUnaryMethod_deleteFile<WithStreamedUnaryMethod_updateFile<WithStreamedUnaryMethod_selectFile<WithStreamedUnaryMethod_searchFile<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_insertFile<WithStreamedUnaryMethod_deleteFile<WithStreamedUnaryMethod_updateFile<WithStreamedUnaryMethod_selectFile<WithStreamedUnaryMethod_searchFile<Service > > > > > StreamedService;
};

// 同步服务
class MySyncService final {
 public:
  static constexpr char const* service_full_name() {
    return "MyPackage.MySyncService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 获取最新操作记录
    std::unique_ptr< ::grpc::ClientReaderInterface< ::MyPackage::SyncRecordResponse>> getRecord(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::MyPackage::SyncRecordResponse>>(getRecordRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyPackage::SyncRecordResponse>> AsyncgetRecord(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyPackage::SyncRecordResponse>>(AsyncgetRecordRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyPackage::SyncRecordResponse>> PrepareAsyncgetRecord(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyPackage::SyncRecordResponse>>(PrepareAsyncgetRecordRaw(context, request, cq));
    }
    // 服务器推送消息
    std::unique_ptr< ::grpc::ClientReaderInterface< ::MyPackage::SyncRecordResponse>> syncRecord(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::MyPackage::SyncRecordResponse>>(syncRecordRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyPackage::SyncRecordResponse>> AsyncsyncRecord(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyPackage::SyncRecordResponse>>(AsyncsyncRecordRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyPackage::SyncRecordResponse>> PrepareAsyncsyncRecord(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyPackage::SyncRecordResponse>>(PrepareAsyncsyncRecordRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 获取最新操作记录
      virtual void getRecord(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest* request, ::grpc::ClientReadReactor< ::MyPackage::SyncRecordResponse>* reactor) = 0;
      // 服务器推送消息
      virtual void syncRecord(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest* request, ::grpc::ClientReadReactor< ::MyPackage::SyncRecordResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::MyPackage::SyncRecordResponse>* getRecordRaw(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::MyPackage::SyncRecordResponse>* AsyncgetRecordRaw(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::MyPackage::SyncRecordResponse>* PrepareAsyncgetRecordRaw(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::MyPackage::SyncRecordResponse>* syncRecordRaw(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::MyPackage::SyncRecordResponse>* AsyncsyncRecordRaw(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::MyPackage::SyncRecordResponse>* PrepareAsyncsyncRecordRaw(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::MyPackage::SyncRecordResponse>> getRecord(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::MyPackage::SyncRecordResponse>>(getRecordRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::MyPackage::SyncRecordResponse>> AsyncgetRecord(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::MyPackage::SyncRecordResponse>>(AsyncgetRecordRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::MyPackage::SyncRecordResponse>> PrepareAsyncgetRecord(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::MyPackage::SyncRecordResponse>>(PrepareAsyncgetRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::MyPackage::SyncRecordResponse>> syncRecord(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::MyPackage::SyncRecordResponse>>(syncRecordRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::MyPackage::SyncRecordResponse>> AsyncsyncRecord(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::MyPackage::SyncRecordResponse>>(AsyncsyncRecordRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::MyPackage::SyncRecordResponse>> PrepareAsyncsyncRecord(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::MyPackage::SyncRecordResponse>>(PrepareAsyncsyncRecordRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void getRecord(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest* request, ::grpc::ClientReadReactor< ::MyPackage::SyncRecordResponse>* reactor) override;
      void syncRecord(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest* request, ::grpc::ClientReadReactor< ::MyPackage::SyncRecordResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::MyPackage::SyncRecordResponse>* getRecordRaw(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request) override;
    ::grpc::ClientAsyncReader< ::MyPackage::SyncRecordResponse>* AsyncgetRecordRaw(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::MyPackage::SyncRecordResponse>* PrepareAsyncgetRecordRaw(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::MyPackage::SyncRecordResponse>* syncRecordRaw(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request) override;
    ::grpc::ClientAsyncReader< ::MyPackage::SyncRecordResponse>* AsyncsyncRecordRaw(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::MyPackage::SyncRecordResponse>* PrepareAsyncsyncRecordRaw(::grpc::ClientContext* context, const ::MyPackage::SyncRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getRecord_;
    const ::grpc::internal::RpcMethod rpcmethod_syncRecord_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 获取最新操作记录
    virtual ::grpc::Status getRecord(::grpc::ServerContext* context, const ::MyPackage::SyncRecordRequest* request, ::grpc::ServerWriter< ::MyPackage::SyncRecordResponse>* writer);
    // 服务器推送消息
    virtual ::grpc::Status syncRecord(::grpc::ServerContext* context, const ::MyPackage::SyncRecordRequest* request, ::grpc::ServerWriter< ::MyPackage::SyncRecordResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_getRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getRecord() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRecord(::grpc::ServerContext* /*context*/, const ::MyPackage::SyncRecordRequest* /*request*/, ::grpc::ServerWriter< ::MyPackage::SyncRecordResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRecord(::grpc::ServerContext* context, ::MyPackage::SyncRecordRequest* request, ::grpc::ServerAsyncWriter< ::MyPackage::SyncRecordResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_syncRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_syncRecord() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_syncRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status syncRecord(::grpc::ServerContext* /*context*/, const ::MyPackage::SyncRecordRequest* /*request*/, ::grpc::ServerWriter< ::MyPackage::SyncRecordResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsyncRecord(::grpc::ServerContext* context, ::MyPackage::SyncRecordRequest* request, ::grpc::ServerAsyncWriter< ::MyPackage::SyncRecordResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getRecord<WithAsyncMethod_syncRecord<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_getRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getRecord() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::MyPackage::SyncRecordRequest, ::MyPackage::SyncRecordResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MyPackage::SyncRecordRequest* request) { return this->getRecord(context, request); }));
    }
    ~WithCallbackMethod_getRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRecord(::grpc::ServerContext* /*context*/, const ::MyPackage::SyncRecordRequest* /*request*/, ::grpc::ServerWriter< ::MyPackage::SyncRecordResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::MyPackage::SyncRecordResponse>* getRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::MyPackage::SyncRecordRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_syncRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_syncRecord() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::MyPackage::SyncRecordRequest, ::MyPackage::SyncRecordResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MyPackage::SyncRecordRequest* request) { return this->syncRecord(context, request); }));
    }
    ~WithCallbackMethod_syncRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status syncRecord(::grpc::ServerContext* /*context*/, const ::MyPackage::SyncRecordRequest* /*request*/, ::grpc::ServerWriter< ::MyPackage::SyncRecordResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::MyPackage::SyncRecordResponse>* syncRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::MyPackage::SyncRecordRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_getRecord<WithCallbackMethod_syncRecord<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getRecord() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRecord(::grpc::ServerContext* /*context*/, const ::MyPackage::SyncRecordRequest* /*request*/, ::grpc::ServerWriter< ::MyPackage::SyncRecordResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_syncRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_syncRecord() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_syncRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status syncRecord(::grpc::ServerContext* /*context*/, const ::MyPackage::SyncRecordRequest* /*request*/, ::grpc::ServerWriter< ::MyPackage::SyncRecordResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getRecord() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRecord(::grpc::ServerContext* /*context*/, const ::MyPackage::SyncRecordRequest* /*request*/, ::grpc::ServerWriter< ::MyPackage::SyncRecordResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_syncRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_syncRecord() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_syncRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status syncRecord(::grpc::ServerContext* /*context*/, const ::MyPackage::SyncRecordRequest* /*request*/, ::grpc::ServerWriter< ::MyPackage::SyncRecordResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsyncRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getRecord() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->getRecord(context, request); }));
    }
    ~WithRawCallbackMethod_getRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRecord(::grpc::ServerContext* /*context*/, const ::MyPackage::SyncRecordRequest* /*request*/, ::grpc::ServerWriter< ::MyPackage::SyncRecordResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* getRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_syncRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_syncRecord() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->syncRecord(context, request); }));
    }
    ~WithRawCallbackMethod_syncRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status syncRecord(::grpc::ServerContext* /*context*/, const ::MyPackage::SyncRecordRequest* /*request*/, ::grpc::ServerWriter< ::MyPackage::SyncRecordResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* syncRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_getRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_getRecord() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::MyPackage::SyncRecordRequest, ::MyPackage::SyncRecordResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::MyPackage::SyncRecordRequest, ::MyPackage::SyncRecordResponse>* streamer) {
                       return this->StreamedgetRecord(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_getRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getRecord(::grpc::ServerContext* /*context*/, const ::MyPackage::SyncRecordRequest* /*request*/, ::grpc::ServerWriter< ::MyPackage::SyncRecordResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedgetRecord(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::MyPackage::SyncRecordRequest,::MyPackage::SyncRecordResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_syncRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_syncRecord() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::MyPackage::SyncRecordRequest, ::MyPackage::SyncRecordResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::MyPackage::SyncRecordRequest, ::MyPackage::SyncRecordResponse>* streamer) {
                       return this->StreamedsyncRecord(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_syncRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status syncRecord(::grpc::ServerContext* /*context*/, const ::MyPackage::SyncRecordRequest* /*request*/, ::grpc::ServerWriter< ::MyPackage::SyncRecordResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedsyncRecord(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::MyPackage::SyncRecordRequest,::MyPackage::SyncRecordResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_getRecord<WithSplitStreamingMethod_syncRecord<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_getRecord<WithSplitStreamingMethod_syncRecord<Service > > StreamedService;
};

}  // namespace MyPackage


#endif  // GRPC_MyProto_2eproto__INCLUDED
