// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MyProto.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_MyProto_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_MyProto_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_MyProto_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_MyProto_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_MyProto_2eproto;
namespace MyPackage {
class FileDownloadRequest;
struct FileDownloadRequestDefaultTypeInternal;
extern FileDownloadRequestDefaultTypeInternal _FileDownloadRequest_default_instance_;
class FileDownloadResponse;
struct FileDownloadResponseDefaultTypeInternal;
extern FileDownloadResponseDefaultTypeInternal _FileDownloadResponse_default_instance_;
class FileInfo;
struct FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
class FileOperateRequest;
struct FileOperateRequestDefaultTypeInternal;
extern FileOperateRequestDefaultTypeInternal _FileOperateRequest_default_instance_;
class FileOperateResponse;
struct FileOperateResponseDefaultTypeInternal;
extern FileOperateResponseDefaultTypeInternal _FileOperateResponse_default_instance_;
class FileSearchRequest;
struct FileSearchRequestDefaultTypeInternal;
extern FileSearchRequestDefaultTypeInternal _FileSearchRequest_default_instance_;
class FileSearchResponse;
struct FileSearchResponseDefaultTypeInternal;
extern FileSearchResponseDefaultTypeInternal _FileSearchResponse_default_instance_;
class FileUploadRequest;
struct FileUploadRequestDefaultTypeInternal;
extern FileUploadRequestDefaultTypeInternal _FileUploadRequest_default_instance_;
class FileUploadResponse;
struct FileUploadResponseDefaultTypeInternal;
extern FileUploadResponseDefaultTypeInternal _FileUploadResponse_default_instance_;
}  // namespace MyPackage
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace MyPackage {

// ===================================================================


// -------------------------------------------------------------------

class FileUploadResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MyPackage.FileUploadResponse) */ {
 public:
  inline FileUploadResponse() : FileUploadResponse(nullptr) {}
  ~FileUploadResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileUploadResponse(::google::protobuf::internal::ConstantInitialized);

  inline FileUploadResponse(const FileUploadResponse& from)
      : FileUploadResponse(nullptr, from) {}
  FileUploadResponse(FileUploadResponse&& from) noexcept
    : FileUploadResponse() {
    *this = ::std::move(from);
  }

  inline FileUploadResponse& operator=(const FileUploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileUploadResponse& operator=(FileUploadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileUploadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileUploadResponse* internal_default_instance() {
    return reinterpret_cast<const FileUploadResponse*>(
               &_FileUploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FileUploadResponse& a, FileUploadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FileUploadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileUploadResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileUploadResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileUploadResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileUploadResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FileUploadResponse& from) {
    FileUploadResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FileUploadResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MyPackage.FileUploadResponse";
  }
  protected:
  explicit FileUploadResponse(::google::protobuf::Arena* arena);
  FileUploadResponse(::google::protobuf::Arena* arena, const FileUploadResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCacheIdFieldNumber = 1,
  };
  // int64 cacheId = 1;
  void clear_cacheid() ;
  ::int64_t cacheid() const;
  void set_cacheid(::int64_t value);

  private:
  ::int64_t _internal_cacheid() const;
  void _internal_set_cacheid(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:MyPackage.FileUploadResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int64_t cacheid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MyProto_2eproto;
};// -------------------------------------------------------------------

class FileUploadRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MyPackage.FileUploadRequest) */ {
 public:
  inline FileUploadRequest() : FileUploadRequest(nullptr) {}
  ~FileUploadRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileUploadRequest(::google::protobuf::internal::ConstantInitialized);

  inline FileUploadRequest(const FileUploadRequest& from)
      : FileUploadRequest(nullptr, from) {}
  FileUploadRequest(FileUploadRequest&& from) noexcept
    : FileUploadRequest() {
    *this = ::std::move(from);
  }

  inline FileUploadRequest& operator=(const FileUploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileUploadRequest& operator=(FileUploadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileUploadRequest& default_instance() {
    return *internal_default_instance();
  }
  enum SizeCase {
    kFileSize = 1,
    kChunkSize = 2,
    SIZE_NOT_SET = 0,
  };

  static inline const FileUploadRequest* internal_default_instance() {
    return reinterpret_cast<const FileUploadRequest*>(
               &_FileUploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FileUploadRequest& a, FileUploadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FileUploadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileUploadRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileUploadRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileUploadRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileUploadRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FileUploadRequest& from) {
    FileUploadRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FileUploadRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MyPackage.FileUploadRequest";
  }
  protected:
  explicit FileUploadRequest(::google::protobuf::Arena* arena);
  FileUploadRequest(::google::protobuf::Arena* arena, const FileUploadRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkFieldNumber = 3,
    kFileSizeFieldNumber = 1,
    kChunkSizeFieldNumber = 2,
  };
  // bytes chunk = 3;
  void clear_chunk() ;
  const std::string& chunk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chunk(Arg_&& arg, Args_... args);
  std::string* mutable_chunk();
  PROTOBUF_NODISCARD std::string* release_chunk();
  void set_allocated_chunk(std::string* value);

  private:
  const std::string& _internal_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chunk(
      const std::string& value);
  std::string* _internal_mutable_chunk();

  public:
  // int64 fileSize = 1;
  bool has_filesize() const;
  void clear_filesize() ;
  ::int64_t filesize() const;
  void set_filesize(::int64_t value);

  private:
  ::int64_t _internal_filesize() const;
  void _internal_set_filesize(::int64_t value);

  public:
  // int64 chunkSize = 2;
  bool has_chunksize() const;
  void clear_chunksize() ;
  ::int64_t chunksize() const;
  void set_chunksize(::int64_t value);

  private:
  ::int64_t _internal_chunksize() const;
  void _internal_set_chunksize(::int64_t value);

  public:
  void clear_size();
  SizeCase size_case() const;
  // @@protoc_insertion_point(class_scope:MyPackage.FileUploadRequest)
 private:
  class _Internal;
  void set_has_filesize();
  void set_has_chunksize();

  inline bool has_size() const;
  inline void clear_has_size();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr chunk_;
    union SizeUnion {
      constexpr SizeUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::int64_t filesize_;
      ::int64_t chunksize_;
    } size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MyProto_2eproto;
};// -------------------------------------------------------------------

class FileSearchRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MyPackage.FileSearchRequest) */ {
 public:
  inline FileSearchRequest() : FileSearchRequest(nullptr) {}
  ~FileSearchRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileSearchRequest(::google::protobuf::internal::ConstantInitialized);

  inline FileSearchRequest(const FileSearchRequest& from)
      : FileSearchRequest(nullptr, from) {}
  FileSearchRequest(FileSearchRequest&& from) noexcept
    : FileSearchRequest() {
    *this = ::std::move(from);
  }

  inline FileSearchRequest& operator=(const FileSearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSearchRequest& operator=(FileSearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileSearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileSearchRequest* internal_default_instance() {
    return reinterpret_cast<const FileSearchRequest*>(
               &_FileSearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FileSearchRequest& a, FileSearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FileSearchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSearchRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileSearchRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileSearchRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileSearchRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FileSearchRequest& from) {
    FileSearchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FileSearchRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MyPackage.FileSearchRequest";
  }
  protected:
  explicit FileSearchRequest(::google::protobuf::Arena* arena);
  FileSearchRequest(::google::protobuf::Arena* arena, const FileSearchRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConditionFieldNumber = 1,
  };
  // string condition = 1;
  void clear_condition() ;
  const std::string& condition() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_condition(Arg_&& arg, Args_... args);
  std::string* mutable_condition();
  PROTOBUF_NODISCARD std::string* release_condition();
  void set_allocated_condition(std::string* value);

  private:
  const std::string& _internal_condition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_condition(
      const std::string& value);
  std::string* _internal_mutable_condition();

  public:
  // @@protoc_insertion_point(class_scope:MyPackage.FileSearchRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      45, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr condition_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MyProto_2eproto;
};// -------------------------------------------------------------------

class FileInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MyPackage.FileInfo) */ {
 public:
  inline FileInfo() : FileInfo(nullptr) {}
  ~FileInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileInfo(::google::protobuf::internal::ConstantInitialized);

  inline FileInfo(const FileInfo& from)
      : FileInfo(nullptr, from) {}
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FileInfo& from) {
    FileInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FileInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MyPackage.FileInfo";
  }
  protected:
  explicit FileInfo(::google::protobuf::Arena* arena);
  FileInfo(::google::protobuf::Arena* arena, const FileInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 4,
    kFileIdFieldNumber = 1,
    kFileSizeFieldNumber = 2,
    kUpdateTimeFieldNumber = 3,
  };
  // string fileName = 4;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // int64 fileId = 1;
  void clear_fileid() ;
  ::int64_t fileid() const;
  void set_fileid(::int64_t value);

  private:
  ::int64_t _internal_fileid() const;
  void _internal_set_fileid(::int64_t value);

  public:
  // int64 fileSize = 2;
  void clear_filesize() ;
  ::int64_t filesize() const;
  void set_filesize(::int64_t value);

  private:
  ::int64_t _internal_filesize() const;
  void _internal_set_filesize(::int64_t value);

  public:
  // int64 updateTime = 3;
  void clear_updatetime() ;
  ::int64_t updatetime() const;
  void set_updatetime(::int64_t value);

  private:
  ::int64_t _internal_updatetime() const;
  void _internal_set_updatetime(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:MyPackage.FileInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      35, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::int64_t fileid_;
    ::int64_t filesize_;
    ::int64_t updatetime_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MyProto_2eproto;
};// -------------------------------------------------------------------

class FileDownloadResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MyPackage.FileDownloadResponse) */ {
 public:
  inline FileDownloadResponse() : FileDownloadResponse(nullptr) {}
  ~FileDownloadResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileDownloadResponse(::google::protobuf::internal::ConstantInitialized);

  inline FileDownloadResponse(const FileDownloadResponse& from)
      : FileDownloadResponse(nullptr, from) {}
  FileDownloadResponse(FileDownloadResponse&& from) noexcept
    : FileDownloadResponse() {
    *this = ::std::move(from);
  }

  inline FileDownloadResponse& operator=(const FileDownloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDownloadResponse& operator=(FileDownloadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileDownloadResponse& default_instance() {
    return *internal_default_instance();
  }
  enum SizeCase {
    kFileSize = 1,
    kChunkSize = 2,
    SIZE_NOT_SET = 0,
  };

  static inline const FileDownloadResponse* internal_default_instance() {
    return reinterpret_cast<const FileDownloadResponse*>(
               &_FileDownloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FileDownloadResponse& a, FileDownloadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDownloadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDownloadResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDownloadResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileDownloadResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileDownloadResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FileDownloadResponse& from) {
    FileDownloadResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FileDownloadResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MyPackage.FileDownloadResponse";
  }
  protected:
  explicit FileDownloadResponse(::google::protobuf::Arena* arena);
  FileDownloadResponse(::google::protobuf::Arena* arena, const FileDownloadResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkFieldNumber = 3,
    kFileSizeFieldNumber = 1,
    kChunkSizeFieldNumber = 2,
  };
  // bytes chunk = 3;
  void clear_chunk() ;
  const std::string& chunk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chunk(Arg_&& arg, Args_... args);
  std::string* mutable_chunk();
  PROTOBUF_NODISCARD std::string* release_chunk();
  void set_allocated_chunk(std::string* value);

  private:
  const std::string& _internal_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chunk(
      const std::string& value);
  std::string* _internal_mutable_chunk();

  public:
  // int64 fileSize = 1;
  bool has_filesize() const;
  void clear_filesize() ;
  ::int64_t filesize() const;
  void set_filesize(::int64_t value);

  private:
  ::int64_t _internal_filesize() const;
  void _internal_set_filesize(::int64_t value);

  public:
  // int64 chunkSize = 2;
  bool has_chunksize() const;
  void clear_chunksize() ;
  ::int64_t chunksize() const;
  void set_chunksize(::int64_t value);

  private:
  ::int64_t _internal_chunksize() const;
  void _internal_set_chunksize(::int64_t value);

  public:
  void clear_size();
  SizeCase size_case() const;
  // @@protoc_insertion_point(class_scope:MyPackage.FileDownloadResponse)
 private:
  class _Internal;
  void set_has_filesize();
  void set_has_chunksize();

  inline bool has_size() const;
  inline void clear_has_size();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr chunk_;
    union SizeUnion {
      constexpr SizeUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::int64_t filesize_;
      ::int64_t chunksize_;
    } size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MyProto_2eproto;
};// -------------------------------------------------------------------

class FileDownloadRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MyPackage.FileDownloadRequest) */ {
 public:
  inline FileDownloadRequest() : FileDownloadRequest(nullptr) {}
  ~FileDownloadRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileDownloadRequest(::google::protobuf::internal::ConstantInitialized);

  inline FileDownloadRequest(const FileDownloadRequest& from)
      : FileDownloadRequest(nullptr, from) {}
  FileDownloadRequest(FileDownloadRequest&& from) noexcept
    : FileDownloadRequest() {
    *this = ::std::move(from);
  }

  inline FileDownloadRequest& operator=(const FileDownloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDownloadRequest& operator=(FileDownloadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileDownloadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileDownloadRequest* internal_default_instance() {
    return reinterpret_cast<const FileDownloadRequest*>(
               &_FileDownloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FileDownloadRequest& a, FileDownloadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDownloadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDownloadRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDownloadRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileDownloadRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileDownloadRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FileDownloadRequest& from) {
    FileDownloadRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FileDownloadRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MyPackage.FileDownloadRequest";
  }
  protected:
  explicit FileDownloadRequest(::google::protobuf::Arena* arena);
  FileDownloadRequest(::google::protobuf::Arena* arena, const FileDownloadRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileIdFieldNumber = 1,
  };
  // int64 fileId = 1;
  void clear_fileid() ;
  ::int64_t fileid() const;
  void set_fileid(::int64_t value);

  private:
  ::int64_t _internal_fileid() const;
  void _internal_set_fileid(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:MyPackage.FileDownloadRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int64_t fileid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MyProto_2eproto;
};// -------------------------------------------------------------------

class FileSearchResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MyPackage.FileSearchResponse) */ {
 public:
  inline FileSearchResponse() : FileSearchResponse(nullptr) {}
  ~FileSearchResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileSearchResponse(::google::protobuf::internal::ConstantInitialized);

  inline FileSearchResponse(const FileSearchResponse& from)
      : FileSearchResponse(nullptr, from) {}
  FileSearchResponse(FileSearchResponse&& from) noexcept
    : FileSearchResponse() {
    *this = ::std::move(from);
  }

  inline FileSearchResponse& operator=(const FileSearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSearchResponse& operator=(FileSearchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileSearchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileSearchResponse* internal_default_instance() {
    return reinterpret_cast<const FileSearchResponse*>(
               &_FileSearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FileSearchResponse& a, FileSearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FileSearchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSearchResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileSearchResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileSearchResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileSearchResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FileSearchResponse& from) {
    FileSearchResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FileSearchResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MyPackage.FileSearchResponse";
  }
  protected:
  explicit FileSearchResponse(::google::protobuf::Arena* arena);
  FileSearchResponse(::google::protobuf::Arena* arena, const FileSearchResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 1,
    kOkFieldNumber = 2,
  };
  // repeated .MyPackage.FileInfo infos = 1;
  int infos_size() const;
  private:
  int _internal_infos_size() const;

  public:
  void clear_infos() ;
  ::MyPackage::FileInfo* mutable_infos(int index);
  ::google::protobuf::RepeatedPtrField< ::MyPackage::FileInfo >*
      mutable_infos();
  private:
  const ::google::protobuf::RepeatedPtrField<::MyPackage::FileInfo>& _internal_infos() const;
  ::google::protobuf::RepeatedPtrField<::MyPackage::FileInfo>* _internal_mutable_infos();
  public:
  const ::MyPackage::FileInfo& infos(int index) const;
  ::MyPackage::FileInfo* add_infos();
  const ::google::protobuf::RepeatedPtrField< ::MyPackage::FileInfo >&
      infos() const;
  // bool ok = 2;
  void clear_ok() ;
  bool ok() const;
  void set_ok(bool value);

  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);

  public:
  // @@protoc_insertion_point(class_scope:MyPackage.FileSearchResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::MyPackage::FileInfo > infos_;
    bool ok_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MyProto_2eproto;
};// -------------------------------------------------------------------

class FileOperateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MyPackage.FileOperateResponse) */ {
 public:
  inline FileOperateResponse() : FileOperateResponse(nullptr) {}
  ~FileOperateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileOperateResponse(::google::protobuf::internal::ConstantInitialized);

  inline FileOperateResponse(const FileOperateResponse& from)
      : FileOperateResponse(nullptr, from) {}
  FileOperateResponse(FileOperateResponse&& from) noexcept
    : FileOperateResponse() {
    *this = ::std::move(from);
  }

  inline FileOperateResponse& operator=(const FileOperateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileOperateResponse& operator=(FileOperateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileOperateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileOperateResponse* internal_default_instance() {
    return reinterpret_cast<const FileOperateResponse*>(
               &_FileOperateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileOperateResponse& a, FileOperateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FileOperateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileOperateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileOperateResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileOperateResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileOperateResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FileOperateResponse& from) {
    FileOperateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FileOperateResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MyPackage.FileOperateResponse";
  }
  protected:
  explicit FileOperateResponse(::google::protobuf::Arena* arena);
  FileOperateResponse(::google::protobuf::Arena* arena, const FileOperateResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kOkFieldNumber = 2,
  };
  // .MyPackage.FileInfo info = 1;
  bool has_info() const;
  void clear_info() ;
  const ::MyPackage::FileInfo& info() const;
  PROTOBUF_NODISCARD ::MyPackage::FileInfo* release_info();
  ::MyPackage::FileInfo* mutable_info();
  void set_allocated_info(::MyPackage::FileInfo* value);
  void unsafe_arena_set_allocated_info(::MyPackage::FileInfo* value);
  ::MyPackage::FileInfo* unsafe_arena_release_info();

  private:
  const ::MyPackage::FileInfo& _internal_info() const;
  ::MyPackage::FileInfo* _internal_mutable_info();

  public:
  // bool ok = 2;
  void clear_ok() ;
  bool ok() const;
  void set_ok(bool value);

  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);

  public:
  // @@protoc_insertion_point(class_scope:MyPackage.FileOperateResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::MyPackage::FileInfo* info_;
    bool ok_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MyProto_2eproto;
};// -------------------------------------------------------------------

class FileOperateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MyPackage.FileOperateRequest) */ {
 public:
  inline FileOperateRequest() : FileOperateRequest(nullptr) {}
  ~FileOperateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileOperateRequest(::google::protobuf::internal::ConstantInitialized);

  inline FileOperateRequest(const FileOperateRequest& from)
      : FileOperateRequest(nullptr, from) {}
  FileOperateRequest(FileOperateRequest&& from) noexcept
    : FileOperateRequest() {
    *this = ::std::move(from);
  }

  inline FileOperateRequest& operator=(const FileOperateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileOperateRequest& operator=(FileOperateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileOperateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileOperateRequest* internal_default_instance() {
    return reinterpret_cast<const FileOperateRequest*>(
               &_FileOperateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileOperateRequest& a, FileOperateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FileOperateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileOperateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileOperateRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileOperateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileOperateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FileOperateRequest& from) {
    FileOperateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FileOperateRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MyPackage.FileOperateRequest";
  }
  protected:
  explicit FileOperateRequest(::google::protobuf::Arena* arena);
  FileOperateRequest(::google::protobuf::Arena* arena, const FileOperateRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kCacheIdFieldNumber = 2,
  };
  // .MyPackage.FileInfo info = 1;
  bool has_info() const;
  void clear_info() ;
  const ::MyPackage::FileInfo& info() const;
  PROTOBUF_NODISCARD ::MyPackage::FileInfo* release_info();
  ::MyPackage::FileInfo* mutable_info();
  void set_allocated_info(::MyPackage::FileInfo* value);
  void unsafe_arena_set_allocated_info(::MyPackage::FileInfo* value);
  ::MyPackage::FileInfo* unsafe_arena_release_info();

  private:
  const ::MyPackage::FileInfo& _internal_info() const;
  ::MyPackage::FileInfo* _internal_mutable_info();

  public:
  // int64 cacheId = 2;
  void clear_cacheid() ;
  ::int64_t cacheid() const;
  void set_cacheid(::int64_t value);

  private:
  ::int64_t _internal_cacheid() const;
  void _internal_set_cacheid(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:MyPackage.FileOperateRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::MyPackage::FileInfo* info_;
    ::int64_t cacheid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MyProto_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FileInfo

// int64 fileId = 1;
inline void FileInfo::clear_fileid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fileid_ = ::int64_t{0};
}
inline ::int64_t FileInfo::fileid() const {
  // @@protoc_insertion_point(field_get:MyPackage.FileInfo.fileId)
  return _internal_fileid();
}
inline void FileInfo::set_fileid(::int64_t value) {
  _internal_set_fileid(value);
  // @@protoc_insertion_point(field_set:MyPackage.FileInfo.fileId)
}
inline ::int64_t FileInfo::_internal_fileid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fileid_;
}
inline void FileInfo::_internal_set_fileid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fileid_ = value;
}

// int64 fileSize = 2;
inline void FileInfo::clear_filesize() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filesize_ = ::int64_t{0};
}
inline ::int64_t FileInfo::filesize() const {
  // @@protoc_insertion_point(field_get:MyPackage.FileInfo.fileSize)
  return _internal_filesize();
}
inline void FileInfo::set_filesize(::int64_t value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:MyPackage.FileInfo.fileSize)
}
inline ::int64_t FileInfo::_internal_filesize() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.filesize_;
}
inline void FileInfo::_internal_set_filesize(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filesize_ = value;
}

// int64 updateTime = 3;
inline void FileInfo::clear_updatetime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.updatetime_ = ::int64_t{0};
}
inline ::int64_t FileInfo::updatetime() const {
  // @@protoc_insertion_point(field_get:MyPackage.FileInfo.updateTime)
  return _internal_updatetime();
}
inline void FileInfo::set_updatetime(::int64_t value) {
  _internal_set_updatetime(value);
  // @@protoc_insertion_point(field_set:MyPackage.FileInfo.updateTime)
}
inline ::int64_t FileInfo::_internal_updatetime() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.updatetime_;
}
inline void FileInfo::_internal_set_updatetime(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.updatetime_ = value;
}

// string fileName = 4;
inline void FileInfo::clear_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& FileInfo::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MyPackage.FileInfo.fileName)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileInfo::set_filename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MyPackage.FileInfo.fileName)
}
inline std::string* FileInfo::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:MyPackage.FileInfo.fileName)
  return _s;
}
inline const std::string& FileInfo::_internal_filename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.filename_.Get();
}
inline void FileInfo::_internal_set_filename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* FileInfo::_internal_mutable_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* FileInfo::release_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MyPackage.FileInfo.fileName)
  return _impl_.filename_.Release();
}
inline void FileInfo::set_allocated_filename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filename_.IsDefault()) {
          _impl_.filename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MyPackage.FileInfo.fileName)
}

// -------------------------------------------------------------------

// FileOperateRequest

// .MyPackage.FileInfo info = 1;
inline bool FileOperateRequest::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline void FileOperateRequest::clear_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::MyPackage::FileInfo& FileOperateRequest::_internal_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::MyPackage::FileInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::MyPackage::FileInfo&>(::MyPackage::_FileInfo_default_instance_);
}
inline const ::MyPackage::FileInfo& FileOperateRequest::info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MyPackage.FileOperateRequest.info)
  return _internal_info();
}
inline void FileOperateRequest::unsafe_arena_set_allocated_info(::MyPackage::FileInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = reinterpret_cast<::MyPackage::FileInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MyPackage.FileOperateRequest.info)
}
inline ::MyPackage::FileInfo* FileOperateRequest::release_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::MyPackage::FileInfo* released = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::MyPackage::FileInfo* FileOperateRequest::unsafe_arena_release_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MyPackage.FileOperateRequest.info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::MyPackage::FileInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::MyPackage::FileInfo* FileOperateRequest::_internal_mutable_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::MyPackage::FileInfo>(GetArena());
    _impl_.info_ = reinterpret_cast<::MyPackage::FileInfo*>(p);
  }
  return _impl_.info_;
}
inline ::MyPackage::FileInfo* FileOperateRequest::mutable_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::MyPackage::FileInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:MyPackage.FileOperateRequest.info)
  return _msg;
}
inline void FileOperateRequest::set_allocated_info(::MyPackage::FileInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::MyPackage::FileInfo*>(_impl_.info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::MyPackage::FileInfo*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.info_ = reinterpret_cast<::MyPackage::FileInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:MyPackage.FileOperateRequest.info)
}

// int64 cacheId = 2;
inline void FileOperateRequest::clear_cacheid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cacheid_ = ::int64_t{0};
}
inline ::int64_t FileOperateRequest::cacheid() const {
  // @@protoc_insertion_point(field_get:MyPackage.FileOperateRequest.cacheId)
  return _internal_cacheid();
}
inline void FileOperateRequest::set_cacheid(::int64_t value) {
  _internal_set_cacheid(value);
  // @@protoc_insertion_point(field_set:MyPackage.FileOperateRequest.cacheId)
}
inline ::int64_t FileOperateRequest::_internal_cacheid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cacheid_;
}
inline void FileOperateRequest::_internal_set_cacheid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cacheid_ = value;
}

// -------------------------------------------------------------------

// FileOperateResponse

// .MyPackage.FileInfo info = 1;
inline bool FileOperateResponse::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline void FileOperateResponse::clear_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::MyPackage::FileInfo& FileOperateResponse::_internal_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::MyPackage::FileInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::MyPackage::FileInfo&>(::MyPackage::_FileInfo_default_instance_);
}
inline const ::MyPackage::FileInfo& FileOperateResponse::info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MyPackage.FileOperateResponse.info)
  return _internal_info();
}
inline void FileOperateResponse::unsafe_arena_set_allocated_info(::MyPackage::FileInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = reinterpret_cast<::MyPackage::FileInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MyPackage.FileOperateResponse.info)
}
inline ::MyPackage::FileInfo* FileOperateResponse::release_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::MyPackage::FileInfo* released = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::MyPackage::FileInfo* FileOperateResponse::unsafe_arena_release_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MyPackage.FileOperateResponse.info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::MyPackage::FileInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::MyPackage::FileInfo* FileOperateResponse::_internal_mutable_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::MyPackage::FileInfo>(GetArena());
    _impl_.info_ = reinterpret_cast<::MyPackage::FileInfo*>(p);
  }
  return _impl_.info_;
}
inline ::MyPackage::FileInfo* FileOperateResponse::mutable_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::MyPackage::FileInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:MyPackage.FileOperateResponse.info)
  return _msg;
}
inline void FileOperateResponse::set_allocated_info(::MyPackage::FileInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::MyPackage::FileInfo*>(_impl_.info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::MyPackage::FileInfo*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.info_ = reinterpret_cast<::MyPackage::FileInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:MyPackage.FileOperateResponse.info)
}

// bool ok = 2;
inline void FileOperateResponse::clear_ok() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ok_ = false;
}
inline bool FileOperateResponse::ok() const {
  // @@protoc_insertion_point(field_get:MyPackage.FileOperateResponse.ok)
  return _internal_ok();
}
inline void FileOperateResponse::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:MyPackage.FileOperateResponse.ok)
}
inline bool FileOperateResponse::_internal_ok() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ok_;
}
inline void FileOperateResponse::_internal_set_ok(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ok_ = value;
}

// -------------------------------------------------------------------

// FileSearchRequest

// string condition = 1;
inline void FileSearchRequest::clear_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.condition_.ClearToEmpty();
}
inline const std::string& FileSearchRequest::condition() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MyPackage.FileSearchRequest.condition)
  return _internal_condition();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileSearchRequest::set_condition(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.condition_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MyPackage.FileSearchRequest.condition)
}
inline std::string* FileSearchRequest::mutable_condition() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_condition();
  // @@protoc_insertion_point(field_mutable:MyPackage.FileSearchRequest.condition)
  return _s;
}
inline const std::string& FileSearchRequest::_internal_condition() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.condition_.Get();
}
inline void FileSearchRequest::_internal_set_condition(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.condition_.Set(value, GetArena());
}
inline std::string* FileSearchRequest::_internal_mutable_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.condition_.Mutable( GetArena());
}
inline std::string* FileSearchRequest::release_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MyPackage.FileSearchRequest.condition)
  return _impl_.condition_.Release();
}
inline void FileSearchRequest::set_allocated_condition(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.condition_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.condition_.IsDefault()) {
          _impl_.condition_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MyPackage.FileSearchRequest.condition)
}

// -------------------------------------------------------------------

// FileSearchResponse

// repeated .MyPackage.FileInfo infos = 1;
inline int FileSearchResponse::_internal_infos_size() const {
  return _internal_infos().size();
}
inline int FileSearchResponse::infos_size() const {
  return _internal_infos_size();
}
inline void FileSearchResponse::clear_infos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.infos_.Clear();
}
inline ::MyPackage::FileInfo* FileSearchResponse::mutable_infos(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:MyPackage.FileSearchResponse.infos)
  return _internal_mutable_infos()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MyPackage::FileInfo>* FileSearchResponse::mutable_infos()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MyPackage.FileSearchResponse.infos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_infos();
}
inline const ::MyPackage::FileInfo& FileSearchResponse::infos(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MyPackage.FileSearchResponse.infos)
  return _internal_infos().Get(index);
}
inline ::MyPackage::FileInfo* FileSearchResponse::add_infos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::MyPackage::FileInfo* _add = _internal_mutable_infos()->Add();
  // @@protoc_insertion_point(field_add:MyPackage.FileSearchResponse.infos)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MyPackage::FileInfo>& FileSearchResponse::infos() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MyPackage.FileSearchResponse.infos)
  return _internal_infos();
}
inline const ::google::protobuf::RepeatedPtrField<::MyPackage::FileInfo>&
FileSearchResponse::_internal_infos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.infos_;
}
inline ::google::protobuf::RepeatedPtrField<::MyPackage::FileInfo>*
FileSearchResponse::_internal_mutable_infos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.infos_;
}

// bool ok = 2;
inline void FileSearchResponse::clear_ok() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ok_ = false;
}
inline bool FileSearchResponse::ok() const {
  // @@protoc_insertion_point(field_get:MyPackage.FileSearchResponse.ok)
  return _internal_ok();
}
inline void FileSearchResponse::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:MyPackage.FileSearchResponse.ok)
}
inline bool FileSearchResponse::_internal_ok() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ok_;
}
inline void FileSearchResponse::_internal_set_ok(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ok_ = value;
}

// -------------------------------------------------------------------

// FileUploadRequest

// int64 fileSize = 1;
inline bool FileUploadRequest::has_filesize() const {
  return size_case() == kFileSize;
}
inline void FileUploadRequest::set_has_filesize() {
  _impl_._oneof_case_[0] = kFileSize;
}
inline void FileUploadRequest::clear_filesize() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (size_case() == kFileSize) {
    _impl_.size_.filesize_ = ::int64_t{0};
    clear_has_size();
  }
}
inline ::int64_t FileUploadRequest::filesize() const {
  // @@protoc_insertion_point(field_get:MyPackage.FileUploadRequest.fileSize)
  return _internal_filesize();
}
inline void FileUploadRequest::set_filesize(::int64_t value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:MyPackage.FileUploadRequest.fileSize)
}
inline ::int64_t FileUploadRequest::_internal_filesize() const {
  if (size_case() == kFileSize) {
    return _impl_.size_.filesize_;
  }
  return ::int64_t{0};
}
inline void FileUploadRequest::_internal_set_filesize(::int64_t value) {
  if (size_case() != kFileSize) {
    clear_size();
    set_has_filesize();
  }
  _impl_.size_.filesize_ = value;
}

// int64 chunkSize = 2;
inline bool FileUploadRequest::has_chunksize() const {
  return size_case() == kChunkSize;
}
inline void FileUploadRequest::set_has_chunksize() {
  _impl_._oneof_case_[0] = kChunkSize;
}
inline void FileUploadRequest::clear_chunksize() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (size_case() == kChunkSize) {
    _impl_.size_.chunksize_ = ::int64_t{0};
    clear_has_size();
  }
}
inline ::int64_t FileUploadRequest::chunksize() const {
  // @@protoc_insertion_point(field_get:MyPackage.FileUploadRequest.chunkSize)
  return _internal_chunksize();
}
inline void FileUploadRequest::set_chunksize(::int64_t value) {
  _internal_set_chunksize(value);
  // @@protoc_insertion_point(field_set:MyPackage.FileUploadRequest.chunkSize)
}
inline ::int64_t FileUploadRequest::_internal_chunksize() const {
  if (size_case() == kChunkSize) {
    return _impl_.size_.chunksize_;
  }
  return ::int64_t{0};
}
inline void FileUploadRequest::_internal_set_chunksize(::int64_t value) {
  if (size_case() != kChunkSize) {
    clear_size();
    set_has_chunksize();
  }
  _impl_.size_.chunksize_ = value;
}

// bytes chunk = 3;
inline void FileUploadRequest::clear_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chunk_.ClearToEmpty();
}
inline const std::string& FileUploadRequest::chunk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MyPackage.FileUploadRequest.chunk)
  return _internal_chunk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileUploadRequest::set_chunk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chunk_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MyPackage.FileUploadRequest.chunk)
}
inline std::string* FileUploadRequest::mutable_chunk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chunk();
  // @@protoc_insertion_point(field_mutable:MyPackage.FileUploadRequest.chunk)
  return _s;
}
inline const std::string& FileUploadRequest::_internal_chunk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chunk_.Get();
}
inline void FileUploadRequest::_internal_set_chunk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chunk_.Set(value, GetArena());
}
inline std::string* FileUploadRequest::_internal_mutable_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.chunk_.Mutable( GetArena());
}
inline std::string* FileUploadRequest::release_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MyPackage.FileUploadRequest.chunk)
  return _impl_.chunk_.Release();
}
inline void FileUploadRequest::set_allocated_chunk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chunk_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.chunk_.IsDefault()) {
          _impl_.chunk_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MyPackage.FileUploadRequest.chunk)
}

inline bool FileUploadRequest::has_size() const {
  return size_case() != SIZE_NOT_SET;
}
inline void FileUploadRequest::clear_has_size() {
  _impl_._oneof_case_[0] = SIZE_NOT_SET;
}
inline FileUploadRequest::SizeCase FileUploadRequest::size_case() const {
  return FileUploadRequest::SizeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// FileUploadResponse

// int64 cacheId = 1;
inline void FileUploadResponse::clear_cacheid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cacheid_ = ::int64_t{0};
}
inline ::int64_t FileUploadResponse::cacheid() const {
  // @@protoc_insertion_point(field_get:MyPackage.FileUploadResponse.cacheId)
  return _internal_cacheid();
}
inline void FileUploadResponse::set_cacheid(::int64_t value) {
  _internal_set_cacheid(value);
  // @@protoc_insertion_point(field_set:MyPackage.FileUploadResponse.cacheId)
}
inline ::int64_t FileUploadResponse::_internal_cacheid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cacheid_;
}
inline void FileUploadResponse::_internal_set_cacheid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cacheid_ = value;
}

// -------------------------------------------------------------------

// FileDownloadRequest

// int64 fileId = 1;
inline void FileDownloadRequest::clear_fileid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fileid_ = ::int64_t{0};
}
inline ::int64_t FileDownloadRequest::fileid() const {
  // @@protoc_insertion_point(field_get:MyPackage.FileDownloadRequest.fileId)
  return _internal_fileid();
}
inline void FileDownloadRequest::set_fileid(::int64_t value) {
  _internal_set_fileid(value);
  // @@protoc_insertion_point(field_set:MyPackage.FileDownloadRequest.fileId)
}
inline ::int64_t FileDownloadRequest::_internal_fileid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fileid_;
}
inline void FileDownloadRequest::_internal_set_fileid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fileid_ = value;
}

// -------------------------------------------------------------------

// FileDownloadResponse

// int64 fileSize = 1;
inline bool FileDownloadResponse::has_filesize() const {
  return size_case() == kFileSize;
}
inline void FileDownloadResponse::set_has_filesize() {
  _impl_._oneof_case_[0] = kFileSize;
}
inline void FileDownloadResponse::clear_filesize() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (size_case() == kFileSize) {
    _impl_.size_.filesize_ = ::int64_t{0};
    clear_has_size();
  }
}
inline ::int64_t FileDownloadResponse::filesize() const {
  // @@protoc_insertion_point(field_get:MyPackage.FileDownloadResponse.fileSize)
  return _internal_filesize();
}
inline void FileDownloadResponse::set_filesize(::int64_t value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:MyPackage.FileDownloadResponse.fileSize)
}
inline ::int64_t FileDownloadResponse::_internal_filesize() const {
  if (size_case() == kFileSize) {
    return _impl_.size_.filesize_;
  }
  return ::int64_t{0};
}
inline void FileDownloadResponse::_internal_set_filesize(::int64_t value) {
  if (size_case() != kFileSize) {
    clear_size();
    set_has_filesize();
  }
  _impl_.size_.filesize_ = value;
}

// int64 chunkSize = 2;
inline bool FileDownloadResponse::has_chunksize() const {
  return size_case() == kChunkSize;
}
inline void FileDownloadResponse::set_has_chunksize() {
  _impl_._oneof_case_[0] = kChunkSize;
}
inline void FileDownloadResponse::clear_chunksize() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (size_case() == kChunkSize) {
    _impl_.size_.chunksize_ = ::int64_t{0};
    clear_has_size();
  }
}
inline ::int64_t FileDownloadResponse::chunksize() const {
  // @@protoc_insertion_point(field_get:MyPackage.FileDownloadResponse.chunkSize)
  return _internal_chunksize();
}
inline void FileDownloadResponse::set_chunksize(::int64_t value) {
  _internal_set_chunksize(value);
  // @@protoc_insertion_point(field_set:MyPackage.FileDownloadResponse.chunkSize)
}
inline ::int64_t FileDownloadResponse::_internal_chunksize() const {
  if (size_case() == kChunkSize) {
    return _impl_.size_.chunksize_;
  }
  return ::int64_t{0};
}
inline void FileDownloadResponse::_internal_set_chunksize(::int64_t value) {
  if (size_case() != kChunkSize) {
    clear_size();
    set_has_chunksize();
  }
  _impl_.size_.chunksize_ = value;
}

// bytes chunk = 3;
inline void FileDownloadResponse::clear_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chunk_.ClearToEmpty();
}
inline const std::string& FileDownloadResponse::chunk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MyPackage.FileDownloadResponse.chunk)
  return _internal_chunk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileDownloadResponse::set_chunk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chunk_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MyPackage.FileDownloadResponse.chunk)
}
inline std::string* FileDownloadResponse::mutable_chunk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chunk();
  // @@protoc_insertion_point(field_mutable:MyPackage.FileDownloadResponse.chunk)
  return _s;
}
inline const std::string& FileDownloadResponse::_internal_chunk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chunk_.Get();
}
inline void FileDownloadResponse::_internal_set_chunk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chunk_.Set(value, GetArena());
}
inline std::string* FileDownloadResponse::_internal_mutable_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.chunk_.Mutable( GetArena());
}
inline std::string* FileDownloadResponse::release_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MyPackage.FileDownloadResponse.chunk)
  return _impl_.chunk_.Release();
}
inline void FileDownloadResponse::set_allocated_chunk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chunk_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.chunk_.IsDefault()) {
          _impl_.chunk_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MyPackage.FileDownloadResponse.chunk)
}

inline bool FileDownloadResponse::has_size() const {
  return size_case() != SIZE_NOT_SET;
}
inline void FileDownloadResponse::clear_has_size() {
  _impl_._oneof_case_[0] = SIZE_NOT_SET;
}
inline FileDownloadResponse::SizeCase FileDownloadResponse::size_case() const {
  return FileDownloadResponse::SizeCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace MyPackage


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_MyProto_2eproto_2epb_2eh
